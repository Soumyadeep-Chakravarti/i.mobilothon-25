# backend/Dockerfile.cpu

# ----------------------------------------------------------------------
# BACKEND DOCKERFILE (CPU VERSION)
# Version: v1.4
# ----------------------------------------------------------------------

# ======================================================================
# STAGE 1: BUILDER
# Heavy lifting - compilation, dependency installation
# ======================================================================
FROM python:3.12-bookworm AS builder

LABEL maintainer="Team Alpha <team@projectdomain.com>" \
      version="v1.4" \
      description="Backend CPU Build - FastAPI + MongoDB + Celery + Redis"

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install system dependencies for OpenCV, dlib, etc.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential git wget curl \
        ffmpeg libsm6 libxext6 libgl1 \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency file and install Python packages
COPY app/requirements-cpu.txt ./requirements-cpu.txt
RUN pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements-cpu.txt \
    && rm -rf /root/.cache/pip


# ======================================================================
# STAGE 2: FINAL RUNTIME IMAGE
# Minimalist production environment
# ======================================================================
FROM python:3.12-slim-bookworm AS final

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PATH="/home/appuser/.local/bin:$PATH"

# Install only the necessary runtime libraries
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        ffmpeg libsm6 libxext6 libgl1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy over compiled dependencies from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application source, models, and entrypoint
COPY app/src ./src
COPY models/ ./models/
COPY app/docker-entrypoint.sh .

RUN chmod +x docker-entrypoint.sh

# Security: Create non-root user
RUN useradd -m appuser
USER appuser

# Healthcheck for monitoring systems (optional)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8000/health/liveness || exit 1

ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["web"]

