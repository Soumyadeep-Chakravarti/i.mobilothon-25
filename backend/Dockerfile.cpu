# ----------------------------------------------------------------------
# STAGE 1: BUILDER (Heavy lifting - compilation and pip installs)
# Use the full Debian image for reliable compilation of complex packages
# (e.g., PyTorch, OpenCV, or Dlib dependencies).
# ----------------------------------------------------------------------
FROM python:3.12-bookworm AS builder

# Set non-interactive mode for apt
ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# 1. Install necessary system dependencies for COMPILATION and RUNTIME.
#    'build-essential' is for compilation; the rest are runtime libraries.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential git wget curl \
        ffmpeg libsm6 libxext6 libgl1 \
        # Dependencies for specific AI/CV libraries might be needed here, e.g.,
        # libjpeg-dev, zlib1g-dev for Pillow/OpenCV
    && rm -rf /var/lib/apt/lists/*

# 2. Copy and install Python dependencies.
COPY app/requirements-cpu.txt .
RUN pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements-cpu.txt \
    && rm -rf /root/.cache/pip

# ----------------------------------------------------------------------
# STAGE 2: FINAL (Runtime - Minimalist environment)
# Use the slim image and only copy what is required to RUN the app.
# ----------------------------------------------------------------------
FROM python:3.12-slim-bookworm AS final

# Re-install minimal runtime-only system dependencies
# These are the dynamic libraries required by the binaries/Python packages
# installed in the 'builder' stage.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        ffmpeg libsm6 libxext6 libgl1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 1. Copy over the compiled Python packages (the bulk of your code/libraries).
#    This includes FastAPI, PyTorch, and all dependencies.
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# 2. Copy the application source code and models.
#    Use a specific path for the app (e.g., app/src)
COPY app/src ./src
COPY models/ ./models/

# 3. Create a non-root user for security (as per your initial output)
RUN useradd -m appuser
USER appuser

# 4. Set the entry point and command
# Replace this with your actual startup command (e.g., uvicorn or gunicorn)
CMD ["python", "src/main.py"]